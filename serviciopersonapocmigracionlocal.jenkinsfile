def SERVER_DEPLOY = null
SERVER_DEPLOY = [env.seleccione_ambiente]
pipeline {
  agent any
  
   environment {
      branch="${branch}"
      credentiales = credentials('jenkinsfuseqa')
      //ipfuseqa="${env.IPFuseqaRoot}"
      ipfuseq5_1= "${ipfuseq5a1}"
      ipfuseq5_2= "${ipfuseq5b2}"
      ipfuseq5_3= "${ipfuseq5c3}"
      pathfuse="${env.pathfuse}"
      profile="${env.perfil_fuse}"
      propertiesboolean="${env.cargarproperties}"
      nexusurl="http://10.20.78.193:8081/nexus/content/repositories/jboss-fuse-qa"
      redhatgaurl="http://10.20.78.193:8081/nexus/content/repositories/redhat-ga-repository/"
      reponame="persona"
      jobname="${env.JOB_NAME}"
      repobash="storage"
      namesonar="personapocmigracion_qa"
      ambiente="qa"


    }

  tools {
    maven 'Maven'
  }

    stages {
        
        stage('Clone') {
        steps {
            script {
              if ("$seleccione_ambiente" == 'Q5A') {
                dir('storage') {
                    checkout([$class: 'GitSCM', branches: [[name: env.branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:coopeuch/'+ env.repobash +'.git']]])
sh "sshpass -p $credentiales_PSW scp Fuse/* jenkins@\${ipfuseq5_1}:/home/jenkins/script/"
sh "sshpass -p $credentiales_PSW scp Fuse/* jenkins@\${ipfuseq5_2}:/home/jenkins/script/" 
sh "sshpass -p $credentiales_PSW scp Fuse/* jenkins@\${ipfuseq5_3}:/home/jenkins/script/"  

                }
              }
            }
                dir('servicio') {
                    checkout([$class: 'GitSCM', branches: [[name: env.branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:coopeuch/'+ env.reponame +'.git']]]) 
                
                
                }            
              }
        } 
        stage('Build') {
        steps {
             dir('servicio') {
                    sh 'mvn clean compile'
             }   
        }
        
        }
        stage('Sonar') {
            environment {
                SCANNER_HOME = tool 'sonar'
                ORGANIZATION = "coopeuch"
                PROJECT_NAME = '${namesonar}'
            }
            steps {
                dir('servicio') {
                withSonarQubeEnv('Sonar') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.java.binaries=target \
                    -Dsonar.projectKey=${namesonar} \
                    -Dsonar.sources=src'''
                  }
                }
              }
            }
        stage('deploy nexus') {
                steps {
                        script
                        {
                            dir('servicio') {
                                sh """
                                 
                                sed -i 's!\${nexus.ambiente}!jboss-fuse-qa!' pom.xml
                                sed -i 's!\${nexus.url}!\${nexusurl}!' pom.xml
                                sed -i 's!\${redhat.ga.url}!\${redhatgaurl}!' pom.xml
                                mvn clean deploy
                                """
                                }
                        }
                    }       
            }
            
            stage('properties') {
                        steps {
                            script{                  
                              if ("$seleccione_ambiente" == 'Q5A') {
                                 dir('storage') {
								    sh "sshpass -p $credentiales_PSW scp Fuse/* jenkins@\${ipfuseq5_1}:/home/jenkins/script/"
                                    sh "sshpass -p $credentiales_PSW scp Fuse/* jenkins@\${ipfuseq5_2}:/home/jenkins/script/"
                                    sh "sshpass -p $credentiales_PSW scp Fuse/* jenkins@\${ipfuseq5_3}:/home/jenkins/script/"
                                    sh "sh Fuse/properties.sh ${propertiesboolean} ${jobname} ${ambiente}"
                                }
                              }
                                dir('servicio') {

                                   sh '''
                                        #!/bin/bash
	if [ -d "/var/lib/jenkins/workspace/$jobname/servicio/files" ] 
	then
	cd /var/lib/jenkins/workspace/${jobname}/servicio/files/properties/${ambiente}
	nameproperties=$(echo $(ls))
	echo \${propertiesboolean}
	sshpass -p $credentiales_PSW ssh jenkins@\${ipfuseqa} sh  /home/jenkins/script/fileprofile.sh \${propertiesboolean} \$nameproperties \${profile}
	else
	echo "*************************************"
	echo "SERVICIO NO TIENE ARCHIVO .PROPERTIES" 
	echo "*************************************"                                             
fi
                                    '''
                                    
                                }
                            }
                        }    
            }

            stage('deploy fuse') {        
                    steps {
                            script{    
                                    dir('servicio') {   
                                                                                 
                                                   
                                            //sh "sh Fuse/deployfuse.sh $credentiales_PSW $credentiales_USR ${ipfuseqa} ${env.perfil_fuse}"
                                          sh '''  
                                            groupid=$(grep -oP '(?<=<groupId>)cl.*(?=</groupId)' pom.xml)
                                            artefactid=$(grep -oP '(?<=<artifactId>)servicio.*(?=</artifactId)' pom.xml)
                                            verion=$(grep -oP '(?<=<version>).*(?=</version)' pom.xml | head -n 1)
                                            espacio=' '
                                            parametros=$groupid$espacio$artefactid$espacio$verion
                                            echo $parametros
                                            sshpass -p \$credentiales_PSW ssh jenkins@\$ipfuseqa sh /home/jenkins/script/jenkinsdeployfuse.sh \$parametros \${profile}
                                            
                                          '''
                                          
                                          
                                    }
                                }
                            }                                       
                }
        } 
}